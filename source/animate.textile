h2. Core Concepts:

The guide covers some of the core concepts of animations in SproutCore.  By referring to this guide, you will be able to:
 
* Gain a basic understanding of SC.View Animate
* Become familiar with the types of animations, how to set their duration, and understand the timing of the effect.
* Take the information provided and apply it to an existing application.
* See real world examples for animating buttons on a toolbar, animating views on touch enabled devices, and creating a 3d plane on a 2d view.

endprologue.


h3. Introduction

Animations play an important role when engineering an application.  They allow a stagnant set of states and views to become fluid with movement.  When used tactfully, these visual effects can be used to create seamless transitions between views, provide 3D space to a flat view or object, or help draw attention to a specific part of your application.  The possibilities are endless with SC.View.Animate.

h4.  What is SC.View.Animate?

SC.View.Animate is a set of features and functionality that makes is easy to build compelling user interfaces.  SC.View.Animation animates the properties of a view or object.  You'll need to think about three things when applying an animation:  The type of animation you'd like to apply, the duration in seconds needed to complete the animation, and how smooth the animations move between frames. 

h4.  What are the features of SC.View.Animate?

SC.View.Animate uses CSS3 animations and javascript as a fallback when needed.  Animations can be combined with multiple types, synchronized and executed at once or executed concurrently.  When using SC.View.Animate the property of a view animates and changes without redrawing the view.  Therefore, the views properties change during the animation.  


h4.  What are the benefits of SC.View.Animate?

Using SC.View.Animate has many benefits.  By using CSS-only timing functions of the animations before falling back to JavaScript is that JavaScript performance is not impacted.  When JavaScript handles the timing functions it has to do some semi-heavy calculations each frame.  Using CSS-only timing functions gives a graceful degradation of sorts.  This approach allows your application to be cross-browser compliant and have optimized performance.

Furthermore, combing multiple types of animations on one view allows you to step outside of the preset effects and enables you to create custom effects.  While synchronizing multiple views to animate at once enables your application to become cinematic or a presentation of sorts.  

And last, when used with a callback method your animations can become concurrent and fluid.  We will explore the aforementioned features and benefits of SC.View.Animate through practical, real-world scenarios towards the end of this guide.  But before we do so lets have a detailed look at SC.View.Animate.

h3. A detailed look

To start with we will explore the syntax for SC.View.Animate.  Below is a basic animation that fades a views opacity from 1.0 down to 0.0.  The duration for how long it takes for the animation to take place is 1.5 seconds and the timing is eased in then out. 

<javascript>
	myApp.myView.animate('opacity',0.0, {duration:1.5, timing:'ease-in-out'});
</javascript>

h4. Type of animation effects

After you set which view you would like to animate, the first parameter passed is the type of animation effect you would like to use.  The following is a list of what animation effects you can use:

h5. opacity

Opacity has a value of 0.0 - 1.0.  The value assigned is that of a percentage.  Therefore, 0.6 is setting a views opacity to 60% transparency.  Opacity is a great way to switch between two views that are stacked on each other. 

h5. scale

Scale has a value of 0.0 - infinite.  The value assigned is that of a percentage.  Therefore, 2.0 is setting a views height and width 200% larger then its defined properties in your view.  Scale allows you to create bounce effects and explore the 3d plane.

h5. top

h5. bottom

h5. left

h5. right

h5. rotateX,

h5. rotateY,

h5. rotateZ,

h5. centerX,

h5. centerY


h4. Duration of an animation

The second parameter passed is the duration of the animations effect and is a value of seconds.

h4. Timing of an animation

The third parameter passed relates to the animations timing.  More specifically, it allows for animations to change their speed over its duration.
	

h5. ease

h5. linear

h5. ease-in

h5. ease-out

h5. ease-in-out

h3. Using SC.Animate:

h4. Adding animations to an existing application

// Here we can have a developer grab an existing application from git and add the animations to the app.  By having the developer use an existing application allows us to walk a developer through with minimal distraction and adds an emphasis to the topic at hand... animations. //

h4. Example animation one: animating buttons on a navigation menu

// Here we will focus only on the animations part of our application and could have a link to the demo (hosted on strobe of course).  The code example shown in the guides will only be the animations. //

h4. Example animation two:  animating views for touch enabled devices

// We would like to show how to use animations with touch enabled devices.  This of course is dependent of 1.5 becoming touch capable.  Currently, our applications do not render on touch devices.  When deployed applications start to a white screen and throw a sc.device error. With the bug set aside, we would like to show how to create custom animations such as a drill down listview for mobile devices or for a tablets navigation menu and navigating through views with a swipe on a tablet. //

h4. Example animation three: using animation in a 3d plane 

// Here we can have some fun and introduce the developer to animating on a 3d plane.  This part of animations is great for creating splash page, and ads. // 